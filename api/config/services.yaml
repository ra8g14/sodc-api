# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    google_recaptcha_secret_key: '%env(GOOGLE_RECAPTCHA_SECRET_KEY)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Serializer\AdminGroupsContextBuilder:
        decorates: 'api_platform.serializer.context_builder'
        arguments: [ '@App\Serializer\AdminGroupsContextBuilder.inner' ]
        
    App\ApiPlatform\AutoGroupResourceMetadataFactory:
        decorates: 'api_platform.metadata.resource.metadata_factory'
        arguments: [ '@App\ApiPlatform\AutoGroupResourceMetadataFactory.inner' ]
        # causes this to decorate around the cached factory so that
        # our service is never cached (which, of course, can have performance
        # implications!)
        decoration_priority: -20
        
    App\ApiPlatform\JwtDecorator:
        decorates: 'api_platform.openapi.factory'
        autoconfigure: false
        decoration_priority: -20

    # Check refresh cookie each time the JWT token is decoded and verified
    App\Authentication\CheckRefreshCookieListener:
        class: App\Authentication\CheckRefreshCookieListener
        arguments: [ '@request_stack' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_decoded, method: onJWTDecoded }

    # Add the refresh token as a cookie
    App\Authentication\RefreshCookieAuthenticationSuccessListener:
        class: App\Authentication\RefreshCookieAuthenticationSuccessListener
        arguments:
            - '@App\Authentication\AuthenticationService'
            - "%gesdinet_jwt_refresh_token.token_parameter_name%"
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse, priority: -10 }
                
    # Add iri to JWT
    App\Authentication\SetIriJWTCreatedListener:
        class: App\Authentication\SetIriJWTCreatedListener
        tags:
           # - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_authenticated, method: onJWTAuthenticated }
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    # Authenticate with the cookie content instead of the request json body
    App\Authentication\CookieRefreshTokenAuthenticator:
        class: App\Authentication\CookieRefreshTokenAuthenticator
        decorates: 'gesdinet.jwtrefreshtoken.authenticator'
        decoration_on_invalid: exception
        arguments:
            - "@gesdinet.jwtrefreshtoken.user_checker"
            - "%gesdinet_jwt_refresh_token.token_parameter_name%"
            - '@App\Authentication\AuthenticationService'
        decoration_priority: -20
